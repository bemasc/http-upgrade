



HTTP                                                      B. M. Schwartz
Internet-Draft                                      Meta Platforms, Inc.
Updates: 9110, 9298 (if approved)                           28 July 2023
Intended status: Standards Track                                        
Expires: 29 January 2024


                     HTTP Upgrade Requires Patience
             draft-schwartz-httpbis-upgrade-patience-latest

Abstract

   The HTTP/1.1 Upgrade mechanism allows the client to request a change
   to a new protocol.  This document clarifies that, after requesting
   such an upgrade, the client must wait for a response before sending
   any more data.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-schwartz-httpbis-upgrade-
   patience/.

   Source for this draft and an issue tracker can be found at
   https://github.com/bemasc/http-upgrade.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 29 January 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Conventions and Definitions
   2.  Background
   3.  Inferred Requirements for HTTP Clients
     3.1.  Patience
     3.2.  Tolerance
   4.  Impact on Existing Upgrade Tokens
     4.1.  "HTTP" (RFC9110)
     4.2.  "TLS" RFC2817
     4.3.  "WebSocket"/"websocket" RFC6455RFC8441
     4.4.  "connect-udp" RFC9298
   5.  IANA Considerations
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   Acknowledgments
   Author's Address

1.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Background

   In HTTP/1.1, a client is permitted to send an "Upgrade" request
   header field to indicate that it would like to convert this
   connection to use a protocol other than HTTP/1.1 ([RFC9110],
   Section 7.8).  The server replies with a "101 (Switching Protocols)"
   status code if it accepts the protocol change.  However, that
   specification also permits the server to reject an Upgrade request:

      A server MAY ignore a received Upgrade header field if it wishes
      to continue using the current protocol on that connection.

   This rejection of the upgrade is common, and can happen for a variety
   of reasons:

   *  The server does not support any of the client's indicated Upgrade
      Tokens (i.e., the client's proposed new protocols), so it
      interprets the request without the upgrade.

   *  The server knows that an upgrade to the offered protocol will not
      provide any improvement over HTTP/1.1 for this resource, so it
      chooses to respond in HTTP/1.1.

   *  The server requires the client to authenticate before processing
      the Upgrade, so it replies with the status code "401
      (Authentication Required)" and provides a challenge in an
      "Authorization" response header ([RFC9110], Section 11.6.2).

   *  The resource has moved, so the server replies with a 3XX redirect
      status code ([RFC9110], Section 3.4).

   After rejecting the upgrade, the server will continue to interpret
   subsequent bytes on that connection in accordance with HTTP/1.1.
   This document explores the implications of this behavior.

3.  Inferred Requirements for HTTP Clients

   This section documents requirements for clients of protocols that
   rely on HTTP Upgrade.

3.1.  Patience

   If the server accepts the upgrade, it interprets the subsequent bytes
   in accordance with the new protocol.  If it rejects the upgrade, it
   interprets those bytes as HTTP/1.1.  However, the client doesn't know
   which interpretation the server will take until it receives the
   server's response status code.  To prevent protocol confusion,
   clients MUST NOT send any data after an HTTP/1.1 request until it
   learns whether the upgrade was accepted.

   Protocol confusion is not limited to incidental failures: it can also
   lead to serious security problems such as request smuggling attacks.
   These attacks are possible when the HTTP client is passing data to
   the server from an untrusted party, as is common in HTTP.  In the
   event of protocol confusion, this data could be misparsed as an HTTP
   request from the client, potentially authenticated by connection-wide
   authentication such as TLS Client Certificates.  This could allow the
   attacker to exercise privileges that are reserved for the client.

   A related category of attacks uses request smuggling to exploit
   vulnerabilities in the server's request parsing logic.  These attacks
   apply when the HTTP client is trusted, but the payload data source is
   not.

3.2.  Tolerance

   If the server rejects the Upgrade, the connection can continue to be
   used for HTTP/1.1.  There is no requirement to close the connection
   in response to an Upgrade rejection, and keeping the connection open
   has performance advantages if additional requests to this server are
   likely.  Accordingly, clients SHOULD NOT close the connection in
   response to a rejected upgrade.

4.  Impact on Existing Upgrade Tokens

   At the time of writing, there are four distinct Upgrade Tokens that
   are registered, associated with published documents, and not marked
   obsolete.  This section considers the impact of the requirements from
   Section 3 on each of these Upgrade Tokens.

4.1.  "HTTP" ([RFC9110], Section 2.5)

   [RFC9110] is the source of the requirement quoted in Section 2.
   However, [RFC9110] additionally states:

      A client cannot begin using an upgraded protocol on the connection
      until it has completely sent the request message (i.e., the client
      can't change the protocol it is sending in the middle of a
      message).

   That text is hereby updated as follows:

      A client cannot begin using an upgraded protocol on the connection
      until it receives confirmation that the server has accepted the
      upgrade.

4.2.  "TLS" [RFC2817]

   [RFC2817] correctly highlights the possibility of the server
   rejecting the upgrade.  The requirements of this document apply to
   any use of the "TLS" Upgrade Token, but no change is required in
   [RFC2817].

4.3.  "WebSocket"/"websocket" [RFC6455][RFC8441]

   Section 4.1 of [RFC6455] says:

      Once the client's opening handshake has been sent, the client MUST
      wait for a response from the server before sending any further
      data.

   This advice is consistent with the requirements in Section 3.

4.4.  "connect-udp" [RFC9298]

   Section 5 of [RFC9298] says:

      A client MAY optimistically start sending UDP packets in HTTP
      Datagrams before receiving the response to its UDP proxying
      request.

   However, in HTTP/1.1, this "proxying request" is an HTTP Upgrade
   request.  This upgrade is likely to be rejected in certain
   circumstances, such as when the proxy responds with a "407 (Proxy
   Authentication Required)" status code.  Additionally, the contents of
   the "connect-udp" protocol stream can include untrusted material
   (i.e., the UDP packets, which might come from other applications on
   the client device).  This creates the possibility of request
   smuggling attacks.  To avoid these concerns, this text is updated as
   follows:

      When using HTTP/2 or later, a client MAY ...

   Section 3.3 of [RFC9298] describes the requirement for a successful
   proxy setup response, including upgrading to the "connect-udp"
   protocol, and says:

      If any of these requirements are not met, the client MUST treat
      this proxying attempt as failed and abort the connection.

   This text is hereby updated as follows:

      If any of these requirements are not met, the client MUST treat
      this proxying attempt as failed.  If the "Upgrade" response header
      field is absent, the client MAY reuse the connection for further
      HTTP/1.1 requests; otherwise it MUST abort the underlying
      connection.

5.  IANA Considerations

   This document has no IANA actions.

6.  References

6.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC9110]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Semantics", STD 97, RFC 9110,
              DOI 10.17487/RFC9110, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9110>.

   [RFC9298]  Schinazi, D., "Proxying UDP in HTTP", RFC 9298,
              DOI 10.17487/RFC9298, August 2022,
              <https://www.rfc-editor.org/rfc/rfc9298>.

6.2.  Informative References

   [RFC2817]  Khare, R. and S. Lawrence, "Upgrading to TLS Within
              HTTP/1.1", RFC 2817, DOI 10.17487/RFC2817, May 2000,
              <https://www.rfc-editor.org/rfc/rfc2817>.

   [RFC6455]  Fette, I. and A. Melnikov, "The WebSocket Protocol",
              RFC 6455, DOI 10.17487/RFC6455, December 2011,
              <https://www.rfc-editor.org/rfc/rfc6455>.

   [RFC8441]  McManus, P., "Bootstrapping WebSockets with HTTP/2",
              RFC 8441, DOI 10.17487/RFC8441, September 2018,
              <https://www.rfc-editor.org/rfc/rfc8441>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Benjamin M. Schwartz
   Meta Platforms, Inc.
   Email: ietf@bemasc.net
